{"ast":null,"code":"// frontend/src/components/RouteMap.js\nimport React,{useState,useEffect}from'react';import{MapContainer,TileLayer,Marker,Popup,Polyline,LayersControl,FeatureGroup}from'react-leaflet';import L from'leaflet';import'leaflet/dist/leaflet.css';import'./RouteMap.css';// Fix default markers (Leaflet + React issue)\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";delete L.Icon.Default.prototype._getIconUrl;L.Icon.Default.mergeOptions({iconRetinaUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',iconUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',shadowUrl:'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png'});// Custom icons for different transport modes\nconst createCustomIcon=function(color,symbol){let size=arguments.length>2&&arguments[2]!==undefined?arguments[2]:30;const fontSize=(size*0.53).toFixed(2);return L.divIcon({className:'custom-div-icon',html:\"<div style=\\\"\\n      background-color: \".concat(color,\";\\n      width: \").concat(size,\"px;\\n      height: \").concat(size,\"px;\\n      border-radius: 50%;\\n      border: 3px solid white;\\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\\n      display: flex;\\n      align-items: center;\\n      justify-content: center;\\n      font-size: \").concat(fontSize,\"px;\\n      color: white;\\n      font-weight: bold;\\n    \\\">\").concat(symbol,\"</div>\"),iconSize:[size,size],iconAnchor:[size/2,size/2],popupAnchor:[0,-size/2]});};// Transport mode styling\nconst transportStyles={truck:{color:'#2563eb',// Blue\nweight:4,opacity:0.8,dashArray:null,icon:'🚛'},rail:{color:'#dc2626',// Red\nweight:6,opacity:0.7,dashArray:'10, 5',icon:'🚂'}};// Add this function after the imports (around line 50):\nconst generateCurvedPath=(start,end,transportMode)=>{if(!start||!end)return[start,end].filter(Boolean);const[lat1,lng1]=start;const[lat2,lng2]=end;// Calculate midpoint\nconst midLat=(lat1+lat2)/2;const midLng=(lng1+lng2)/2;// Add curvature based on transport mode and distance\nconst distance=Math.sqrt(Math.pow(lat2-lat1,2)+Math.pow(lng2-lng1,2));let curveOffset=distance*0.3;// Base curve\n// Mode-specific routing adjustments\nif(transportMode==='rail'){// Rail follows network topology\ncurveOffset=distance*0.25;}else if(transportMode==='truck'){// Trucks follow highways\ncurveOffset=distance*0.15;}// Create curved path with multiple waypoints\nconst waypoints=[];const segments=8;// Number of curve segments\nfor(let i=0;i<=segments;i++){const t=i/segments;// Bezier curve calculation\nconst lat=lat1+t*(lat2-lat1)+Math.sin(t*Math.PI)*curveOffset;const lng=lng1+t*(lng2-lng1)+Math.cos(t*Math.PI)*curveOffset*0.5;waypoints.push([lat,lng]);}return waypoints;};// Decode an encoded polyline string into an array of [lat, lng] coordinates\nconst decodePolyline=encoded=>{if(!encoded)return[];let index=0;let lat=0;let lng=0;const coordinates=[];while(index<encoded.length){let b;let shift=0;let result=0;do{b=encoded.charCodeAt(index++)-63;result|=(b&0x1f)<<shift;shift+=5;}while(b>=0x20);const deltaLat=result&1?~(result>>1):result>>1;lat+=deltaLat;shift=0;result=0;do{b=encoded.charCodeAt(index++)-63;result|=(b&0x1f)<<shift;shift+=5;}while(b>=0x20);const deltaLng=result&1?~(result>>1):result>>1;lng+=deltaLng;coordinates.push([lat*1e-5,lng*1e-5]);}return coordinates;};// Generic coastal paths used when no specific route exists\nconst coastalPaths={west:[[32.7157,-117.1611],[33.7292,-118.2620],[36.6002,-121.8947],[39.1612,-123.7881],[43.3504,-124.3738],[46.2816,-124.0833],[47.6062,-122.3321]],gulf:[[29.7050,-95.0030],[29.4724,-94.0572],[29.9511,-90.0715],[30.6944,-88.0431],[27.9506,-82.4572]],east:[[25.7617,-80.1918],[30.3322,-81.6557],[32.0835,-81.0998],[33.8734,-78.8808],[35.2271,-75.5449],[36.8468,-76.2852],[40.7128,-74.0060],[42.3601,-71.0589]]};// Build a simple coastal fallback between two coordinates\nconst generateCoastalFallback=(start,end)=>{if(!start||!end)return[];const paths=Object.values(coastalPaths);const calcDist=(a,b)=>L.latLng(a[0],a[1]).distanceTo(L.latLng(b[0],b[1]));let bestPath=paths[0];let bestScore=Infinity;paths.forEach(path=>{const score=calcDist(start,path[0])+calcDist(end,path[path.length-1]);if(score<bestScore){bestScore=score;bestPath=path;}});const nearestIndex=(coords,path)=>{let idx=0;let min=Infinity;path.forEach((p,i)=>{const d=calcDist(coords,p);if(d<min){min=d;idx=i;}});return idx;};const startIdx=nearestIndex(start,bestPath);const endIdx=nearestIndex(end,bestPath);let slice=bestPath.slice(Math.min(startIdx,endIdx),Math.max(startIdx,endIdx)+1);if(startIdx>endIdx)slice=slice.reverse();slice[0]=start;slice[slice.length-1]=end;return slice;};// Major US ports and hubs with coordinates\nconst locations={'Houston, TX':[29.7604,-95.3698],'New Orleans, LA':[29.9511,-90.0715],'Mobile, AL':[30.6944,-88.0431],'Tampa Bay, FL':[27.9506,-82.4572],'Savannah, GA':[32.0835,-81.0998],'Jacksonville, FL':[30.3322,-81.6557],'Miami, FL':[25.7617,-80.1918],'New York/NJ':[40.7128,-74.0060],'Philadelphia, PA':[39.9526,-75.1652],'Norfolk, VA':[36.8468,-76.2852],'Boston, MA':[42.3601,-71.0589],'Long Beach, CA':[33.7701,-118.1937],'Los Angeles, CA':[34.0522,-118.2437],'Seattle, WA':[47.6062,-122.3321],'Portland, OR':[45.5152,-122.6784],'San Francisco/Oakland, CA':[37.7749,-122.4194],'Chicago, IL':[41.8781,-87.6298],'St. Louis, MO':[38.6270,-90.1994],'Memphis, TN':[35.1495,-90.0490],'Duluth-Superior, MN/WI':[46.7867,-92.1005]};const RouteMap=_ref=>{let{routeOptions=[],selectedRoute=null,origin='',destination='',onRouteSelect,showAllRoutes=false,height='500px'}=_ref;const[routeData,setRouteData]=useState([]);const[mapCenter,setMapCenter]=useState([39.8283,-98.5795]);// Center of US\nconst[mapZoom,setMapZoom]=useState(4);// Debug logging - moved inside component\nuseEffect(()=>{console.log('RouteMap props:',{routeOptions,selectedRoute,origin,destination});},[routeOptions,selectedRoute,origin,destination]);// Add realistic route paths for different transport modes\nconst getRealisticRoutePath=(origin,destination,transportMode)=>{const originCoords=locations[origin];const destCoords=locations[destination];if(!originCoords||!destCoords)return[originCoords,destCoords].filter(Boolean);// Define intermediate waypoints for major routes\nconst routeWaypoints={'Los Angeles, CA-Seattle, WA':{truck:[[34.0522,-118.2437],[36.7783,-119.4179],[37.7749,-122.4194],[45.5152,-122.6784],[47.6062,-122.3321]],// Via Central Valley, SF, Portland\nrail:[[34.0522,-118.2437],[35.3733,-119.0187],[37.7749,-122.4194],[45.5152,-122.6784],[47.6062,-122.3321]]// Rail network route\n},'Houston, TX-New Orleans, LA':{truck:[[29.7604,-95.3698],[30.2241,-93.2044],[29.9511,-90.0715]],// Via I-10\nrail:[[29.7604,-95.3698],[30.1588,-94.1213],[29.9511,-90.0715]]// Rail corridor\n}// Add more routes as needed\n};const routeKey=\"\".concat(origin,\"-\").concat(destination);const reverseKey=\"\".concat(destination,\"-\").concat(origin);if(routeWaypoints[routeKey]&&routeWaypoints[routeKey][transportMode]){return routeWaypoints[routeKey][transportMode];}else if(routeWaypoints[reverseKey]&&routeWaypoints[reverseKey][transportMode]){return[...routeWaypoints[reverseKey][transportMode]].reverse();}// Fallback to direct route for unknown combinations\nreturn[originCoords,destCoords];};// Process route options for map display\n// UPDATE the route processing to use backend waypoints:\nuseEffect(()=>{if(routeOptions.length>0){const processedRoutes=routeOptions.map((route,index)=>{let routePath=[];// Prefer explicit coordinates from the backend\nif(Array.isArray(route.routePath)&&route.routePath.length>=2){if(typeof route.routePath[0]==='string'){routePath=route.routePath.map(location=>locations[location]).filter(coords=>coords);}else{routePath=route.routePath;}}else if(route.polyline){// Decode any encoded polyline provided\nroutePath=decodePolyline(route.polyline);}else if(route.waypoints&&route.waypoints.length>0){// Backwards compatibility with old waypoint format\nroutePath=route.waypoints;}// Fallback handling for missing waypoints\nif(routePath.length===0){var _route$routePath,_route$routePath2,_route$transportModes;const originCoords=locations[((_route$routePath=route.routePath)===null||_route$routePath===void 0?void 0:_route$routePath[0])||origin];const destCoords=locations[((_route$routePath2=route.routePath)===null||_route$routePath2===void 0?void 0:_route$routePath2[route.routePath.length-1])||destination];const primaryMode=((_route$transportModes=route.transportModes)===null||_route$transportModes===void 0?void 0:_route$transportModes[0])||'truck';// Final fallback to curved path\nif(routePath.length===0&&originCoords&&destCoords){routePath=generateCurvedPath(originCoords,destCoords,primaryMode);}}return{id:route.id||\"route-\".concat(index),name:route.name||\"Route \".concat(index+1),transportModes:route.transportModes||['truck'],routePath,distance:route.distance,estimatedTime:route.estimatedTime,estimatedCost:route.estimatedCost,routingMethod:route.routingMethod,fallback:route.fallback||false,selected:selectedRoute&&selectedRoute.id===route.id};}).filter(route=>route!==null&&route.routePath.length>0);setRouteData(processedRoutes);}},[routeOptions,selectedRoute,origin,destination]);// Format currency\nconst formatCurrency=amount=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',maximumFractionDigits:0}).format(amount);};return/*#__PURE__*/_jsx(\"div\",{className:\"route-map-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg shadow-md overflow-hidden\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bg-blue-600 text-white px-4 py-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold flex items-center gap-2\",children:[\"\\uD83D\\uDDFA\\uFE0F Interactive Route Visualization\",routeData.length>0&&/*#__PURE__*/_jsxs(\"span\",{className:\"text-blue-200 text-sm\",children:[\"(\",routeData.length,\" route\",routeData.length!==1?'s':'',\")\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center gap-4 text-sm\",children:Object.entries(transportStyles).map(_ref2=>{let[mode,style]=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-4 h-1\",style:{backgroundColor:style.color,borderStyle:style.dashArray?'dashed':'solid',borderWidth:'1px'}}),/*#__PURE__*/_jsx(\"span\",{className:\"capitalize\",children:mode})]},mode);})})]})}),/*#__PURE__*/_jsx(\"div\",{style:{height,width:'100%'},children:/*#__PURE__*/_jsxs(MapContainer,{center:mapCenter,zoom:mapZoom,style:{height:'100%',width:'100%'},scrollWheelZoom:true,children:[/*#__PURE__*/_jsx(TileLayer,{attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}),/*#__PURE__*/_jsx(TileLayer,{attribution:\"\\xA9 <a href=\\\"https://www.openseamap.org\\\">OpenSeaMap</a> contributors\",url:\"https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png\",opacity:0.7}),/*#__PURE__*/_jsxs(LayersControl,{position:\"topright\",children:[routeData.map(route=>/*#__PURE__*/_jsx(LayersControl.Overlay,{name:route.name,checked:showAllRoutes||route.selected,children:/*#__PURE__*/_jsxs(FeatureGroup,{children:[route.routePath.length>=2&&route.transportModes.map((mode,modeIndex)=>{const style=transportStyles[mode]||transportStyles.truck;return/*#__PURE__*/_jsx(Polyline,{positions:route.routePath,pathOptions:{color:style.color,weight:style.weight,opacity:route.selected?1.0:style.opacity,dashArray:style.dashArray},eventHandlers:{click:()=>{if(onRouteSelect){onRouteSelect(route);}}},children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"min-w-64\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-blue-600 mb-2\",children:route.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-1 text-sm\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Distance:\"}),\" \",route.distance,\" miles\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Time:\"}),\" \",route.estimatedTime]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Cost:\"}),\" \",formatCurrency(route.estimatedCost)]}),route.routingMethod&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Method:\"}),\" \",route.routingMethod.replace(/_/g,' ')]}),route.fallback&&/*#__PURE__*/_jsx(\"div\",{className:\"text-yellow-600\",children:/*#__PURE__*/_jsx(\"strong\",{children:\"\\u26A0\\uFE0F Estimated route\"})})]})]})})},\"\".concat(route.id,\"-\").concat(mode,\"-\").concat(modeIndex));}),route.routePath.map((coords,index)=>{const isOrigin=index===0;const isDestination=index===route.routePath.length-1;const isWaypoint=!isOrigin&&!isDestination;let markerColor='#6b7280';// Default gray\nlet markerSymbol='📍';let markerSize=30;if(isOrigin){markerColor='#10b981';// Green\nmarkerSymbol='📍';}else if(isDestination){markerColor='#ef4444';// Red\nmarkerSymbol='📍';}else if(isWaypoint){markerColor='#f59e0b';// Yellow\nmarkerSymbol='🟡';markerSize=15;}return/*#__PURE__*/_jsx(Marker,{position:coords,icon:createCustomIcon(markerColor,markerSymbol,markerSize),children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-semibold\",children:isOrigin?'Origin':isDestination?'Destination':'Waypoint'}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Coordinates: \",coords[0].toFixed(4),\", \",coords[1].toFixed(4)]})]})})},\"\".concat(route.id,\"-marker-\").concat(index));})]})},route.id)),/*#__PURE__*/_jsx(LayersControl.Overlay,{name:\"All Ports & Hubs\",checked:false,children:/*#__PURE__*/_jsx(FeatureGroup,{children:Object.entries(locations).map(_ref3=>{let[name,coords]=_ref3;return/*#__PURE__*/_jsx(Marker,{position:coords,icon:createCustomIcon('#6366f1','🏭'),children:/*#__PURE__*/_jsx(Popup,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-semibold\",children:name}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Coordinates: \",coords[0].toFixed(4),\", \",coords[1].toFixed(4)]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xs text-gray-500 mt-1\",children:\"Available for truck and rail transport\"})]})})},name);})})})]})]})}),routeData.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-50 px-4 py-3 border-t\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Route Summary:\"}),\" \",origin,\" \\u2192 \",destination]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center gap-4\",children:selectedRoute?/*#__PURE__*/_jsxs(\"div\",{className:\"text-blue-600\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Selected:\"}),\" \",selectedRoute.name]}):/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-500\",children:\"Click on a route to select it\"})})]})})})]})});};export default RouteMap;","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Polyline","LayersControl","FeatureGroup","L","jsxs","_jsxs","jsx","_jsx","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","createCustomIcon","color","symbol","size","arguments","length","undefined","fontSize","toFixed","divIcon","className","html","concat","iconSize","iconAnchor","popupAnchor","transportStyles","truck","weight","opacity","dashArray","icon","rail","generateCurvedPath","start","end","transportMode","filter","Boolean","lat1","lng1","lat2","lng2","midLat","midLng","distance","Math","sqrt","pow","curveOffset","waypoints","segments","i","t","lat","sin","PI","lng","cos","push","decodePolyline","encoded","index","coordinates","b","shift","result","charCodeAt","deltaLat","deltaLng","coastalPaths","west","gulf","east","generateCoastalFallback","paths","Object","values","calcDist","a","latLng","distanceTo","bestPath","bestScore","Infinity","forEach","path","score","nearestIndex","coords","idx","min","p","d","startIdx","endIdx","slice","max","reverse","locations","RouteMap","_ref","routeOptions","selectedRoute","origin","destination","onRouteSelect","showAllRoutes","height","routeData","setRouteData","mapCenter","setMapCenter","mapZoom","setMapZoom","console","log","getRealisticRoutePath","originCoords","destCoords","routeWaypoints","routeKey","reverseKey","processedRoutes","map","route","routePath","Array","isArray","location","polyline","_route$routePath","_route$routePath2","_route$transportModes","primaryMode","transportModes","id","name","estimatedTime","estimatedCost","routingMethod","fallback","selected","formatCurrency","amount","Intl","NumberFormat","style","currency","maximumFractionDigits","format","children","entries","_ref2","mode","backgroundColor","borderStyle","borderWidth","width","center","zoom","scrollWheelZoom","attribution","url","position","Overlay","checked","modeIndex","positions","pathOptions","eventHandlers","click","replace","isOrigin","isDestination","isWaypoint","markerColor","markerSymbol","markerSize","_ref3"],"sources":["/Users/saloniangre/Downloads/Fuelroute/FinalFRP/frontend/src/components/RouteMap.js"],"sourcesContent":["// frontend/src/components/RouteMap.js\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, LayersControl, FeatureGroup } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './RouteMap.css';\n\n// Fix default markers (Leaflet + React issue)\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',\n});\n\n// Custom icons for different transport modes\nconst createCustomIcon = (color, symbol, size = 30) => {\n  const fontSize = (size * 0.53).toFixed(2);\n  return L.divIcon({\n    className: 'custom-div-icon',\n    html: `<div style=\"\n      background-color: ${color};\n      width: ${size}px;\n      height: ${size}px;\n      border-radius: 50%;\n      border: 3px solid white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: ${fontSize}px;\n      color: white;\n      font-weight: bold;\n    \">${symbol}</div>`,\n    iconSize: [size, size],\n    iconAnchor: [size / 2, size / 2],\n    popupAnchor: [0, -size / 2]\n  });\n};\n\n// Transport mode styling\nconst transportStyles = {\n  truck: {\n    color: '#2563eb', // Blue\n    weight: 4,\n    opacity: 0.8,\n    dashArray: null,\n    icon: '🚛'\n  },\n  rail: {\n    color: '#dc2626', // Red\n    weight: 6,\n    opacity: 0.7,\n    dashArray: '10, 5',\n    icon: '🚂'\n  },\n  \n  };\n\n// Add this function after the imports (around line 50):\nconst generateCurvedPath = (start, end, transportMode) => {\n  if (!start || !end) return [start, end].filter(Boolean);\n  \n  const [lat1, lng1] = start;\n  const [lat2, lng2] = end;\n  \n  // Calculate midpoint\n  const midLat = (lat1 + lat2) / 2;\n  const midLng = (lng1 + lng2) / 2;\n  \n  // Add curvature based on transport mode and distance\n  const distance = Math.sqrt(Math.pow(lat2 - lat1, 2) + Math.pow(lng2 - lng1, 2));\n  let curveOffset = distance * 0.3; // Base curve\n  \n  // Mode-specific routing adjustments\n  if (transportMode === 'rail') {\n    // Rail follows network topology\n    curveOffset = distance * 0.25;\n  } else if (transportMode === 'truck') {\n    // Trucks follow highways\n    curveOffset = distance * 0.15;\n  }\n  \n  // Create curved path with multiple waypoints\n  const waypoints = [];\n  const segments = 8; // Number of curve segments\n  \n  for (let i = 0; i <= segments; i++) {\n    const t = i / segments;\n    \n    // Bezier curve calculation\n    const lat = lat1 + t * (lat2 - lat1) + Math.sin(t * Math.PI) * curveOffset;\n    const lng = lng1 + t * (lng2 - lng1) + Math.cos(t * Math.PI) * curveOffset * 0.5;\n    \n    waypoints.push([lat, lng]);\n  }\n  \n  return waypoints;\n};\n\n// Decode an encoded polyline string into an array of [lat, lng] coordinates\nconst decodePolyline = (encoded) => {\n  if (!encoded) return [];\n\n  let index = 0;\n  let lat = 0;\n  let lng = 0;\n  const coordinates = [];\n\n  while (index < encoded.length) {\n    let b;\n    let shift = 0;\n    let result = 0;\n\n    do {\n      b = encoded.charCodeAt(index++) - 63;\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 0x20);\n\n    const deltaLat = (result & 1) ? ~(result >> 1) : (result >> 1);\n    lat += deltaLat;\n\n    shift = 0;\n    result = 0;\n\n    do {\n      b = encoded.charCodeAt(index++) - 63;\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 0x20);\n\n    const deltaLng = (result & 1) ? ~(result >> 1) : (result >> 1);\n    lng += deltaLng;\n\n    coordinates.push([lat * 1e-5, lng * 1e-5]);\n  }\n\n  return coordinates;\n};\n\n\n// Generic coastal paths used when no specific route exists\nconst coastalPaths = {\n  west: [\n    [32.7157, -117.1611],\n    [33.7292, -118.2620],\n    [36.6002, -121.8947],\n    [39.1612, -123.7881],\n    [43.3504, -124.3738],\n    [46.2816, -124.0833],\n    [47.6062, -122.3321]\n  ],\n  gulf: [\n    [29.7050, -95.0030],\n    [29.4724, -94.0572],\n    [29.9511, -90.0715],\n    [30.6944, -88.0431],\n    [27.9506, -82.4572]\n  ],\n  east: [\n    [25.7617, -80.1918],\n    [30.3322, -81.6557],\n    [32.0835, -81.0998],\n    [33.8734, -78.8808],\n    [35.2271, -75.5449],\n    [36.8468, -76.2852],\n    [40.7128, -74.0060],\n    [42.3601, -71.0589]\n  ]\n};\n\n// Build a simple coastal fallback between two coordinates\nconst generateCoastalFallback = (start, end) => {\n  if (!start || !end) return [];\n\n  const paths = Object.values(coastalPaths);\n\n  const calcDist = (a, b) => L.latLng(a[0], a[1]).distanceTo(L.latLng(b[0], b[1]));\n\n  let bestPath = paths[0];\n  let bestScore = Infinity;\n\n  paths.forEach(path => {\n    const score = calcDist(start, path[0]) + calcDist(end, path[path.length - 1]);\n    if (score < bestScore) {\n      bestScore = score;\n      bestPath = path;\n    }\n  });\n\n  const nearestIndex = (coords, path) => {\n    let idx = 0;\n    let min = Infinity;\n    path.forEach((p, i) => {\n      const d = calcDist(coords, p);\n      if (d < min) {\n        min = d;\n        idx = i;\n      }\n    });\n    return idx;\n  };\n\n  const startIdx = nearestIndex(start, bestPath);\n  const endIdx = nearestIndex(end, bestPath);\n\n  let slice = bestPath.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  if (startIdx > endIdx) slice = slice.reverse();\n\n  slice[0] = start;\n  slice[slice.length - 1] = end;\n\n  return slice;\n};\n\n// Major US ports and hubs with coordinates\nconst locations = {\n  'Houston, TX': [29.7604, -95.3698],\n  'New Orleans, LA': [29.9511, -90.0715],\n  'Mobile, AL': [30.6944, -88.0431],\n  'Tampa Bay, FL': [27.9506, -82.4572],\n  'Savannah, GA': [32.0835, -81.0998],\n  'Jacksonville, FL': [30.3322, -81.6557],\n  'Miami, FL': [25.7617, -80.1918],\n  'New York/NJ': [40.7128, -74.0060],\n  'Philadelphia, PA': [39.9526, -75.1652],\n  'Norfolk, VA': [36.8468, -76.2852],\n  'Boston, MA': [42.3601, -71.0589],\n  'Long Beach, CA': [33.7701, -118.1937],\n  'Los Angeles, CA': [34.0522, -118.2437],\n  'Seattle, WA': [47.6062, -122.3321],\n  'Portland, OR': [45.5152, -122.6784],\n  'San Francisco/Oakland, CA': [37.7749, -122.4194],\n  'Chicago, IL': [41.8781, -87.6298],\n  'St. Louis, MO': [38.6270, -90.1994],\n  'Memphis, TN': [35.1495, -90.0490],\n  'Duluth-Superior, MN/WI': [46.7867, -92.1005]\n};\n\nconst RouteMap = ({ \n  routeOptions = [], \n  selectedRoute = null, \n  origin = '', \n  destination = '', \n  onRouteSelect,\n  showAllRoutes = false,\n  height = '500px'\n}) => {\n  const [routeData, setRouteData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([39.8283, -98.5795]); // Center of US\n  const [mapZoom, setMapZoom] = useState(4);\n\n  // Debug logging - moved inside component\n  useEffect(() => {\n    console.log('RouteMap props:', {\n      routeOptions,\n      selectedRoute,\n      origin,\n      destination\n    });\n  }, [routeOptions, selectedRoute, origin, destination]);\n\n  // Add realistic route paths for different transport modes\n  const getRealisticRoutePath = (origin, destination, transportMode) => {\n    const originCoords = locations[origin];\n    const destCoords = locations[destination];\n    \n    if (!originCoords || !destCoords) return [originCoords, destCoords].filter(Boolean);\n    \n    // Define intermediate waypoints for major routes\n    const routeWaypoints = {\n      'Los Angeles, CA-Seattle, WA': {\n        truck: [[34.0522, -118.2437], [36.7783, -119.4179], [37.7749, -122.4194], [45.5152, -122.6784], [47.6062, -122.3321]], // Via Central Valley, SF, Portland\n        rail: [[34.0522, -118.2437], [35.3733, -119.0187], [37.7749, -122.4194], [45.5152, -122.6784], [47.6062, -122.3321]] // Rail network route\n      },\n      'Houston, TX-New Orleans, LA': {\n        truck: [[29.7604, -95.3698], [30.2241, -93.2044], [29.9511, -90.0715]], // Via I-10\n        rail: [[29.7604, -95.3698], [30.1588, -94.1213], [29.9511, -90.0715]] // Rail corridor\n      }\n      // Add more routes as needed\n    };\n  \n  const routeKey = `${origin}-${destination}`;\n  const reverseKey = `${destination}-${origin}`;\n  \n  if (routeWaypoints[routeKey] && routeWaypoints[routeKey][transportMode]) {\n    return routeWaypoints[routeKey][transportMode];\n  } else if (routeWaypoints[reverseKey] && routeWaypoints[reverseKey][transportMode]) {\n    return [...routeWaypoints[reverseKey][transportMode]].reverse();\n  }\n  \n  // Fallback to direct route for unknown combinations\n  return [originCoords, destCoords];\n};\n\n  // Process route options for map display\n  // UPDATE the route processing to use backend waypoints:\nuseEffect(() => {\n  if (routeOptions.length > 0) {\n    const processedRoutes = routeOptions.map((route, index) => {\n      let routePath = [];\n\n      // Prefer explicit coordinates from the backend\n      if (Array.isArray(route.routePath) && route.routePath.length >= 2) {\n        if (typeof route.routePath[0] === 'string') {\n          routePath = route.routePath\n            .map(location => locations[location])\n            .filter(coords => coords);\n        } else {\n          routePath = route.routePath;\n        }\n      } else if (route.polyline) {\n        // Decode any encoded polyline provided\n        routePath = decodePolyline(route.polyline);\n      } else if (route.waypoints && route.waypoints.length > 0) {\n        // Backwards compatibility with old waypoint format\n        routePath = route.waypoints;\n      }\n\n      // Fallback handling for missing waypoints\n      if (routePath.length === 0) {\n        const originCoords = locations[route.routePath?.[0] || origin];\n        const destCoords = locations[route.routePath?.[route.routePath.length - 1] || destination];\n\n        const primaryMode = route.transportModes?.[0] || 'truck';\n\n\n\n        // Final fallback to curved path\n        if (routePath.length === 0 && originCoords && destCoords) {\n          routePath = generateCurvedPath(originCoords, destCoords, primaryMode);\n        }\n      }\n\n      return {\n        id: route.id || `route-${index}`,\n        name: route.name || `Route ${index + 1}`,\n        transportModes: route.transportModes || ['truck'],\n        routePath,\n        distance: route.distance,\n        estimatedTime: route.estimatedTime,\n        estimatedCost: route.estimatedCost,\n        routingMethod: route.routingMethod,\n        fallback: route.fallback || false,\n        selected: selectedRoute && selectedRoute.id === route.id\n      };\n    }).filter(route => route !== null && route.routePath.length > 0);\n\n    setRouteData(processedRoutes);\n  }\n}, [routeOptions, selectedRoute, origin, destination]);\n\n  // Format currency\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"route-map-container\">\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n        {/* Map Header */}\n        <div className=\"bg-blue-600 text-white px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold flex items-center gap-2\">\n              🗺️ Interactive Route Visualization\n              {routeData.length > 0 && (\n                <span className=\"text-blue-200 text-sm\">\n                  ({routeData.length} route{routeData.length !== 1 ? 's' : ''})\n                </span>\n              )}\n            </h3>\n            \n            {/* Legend */}\n            <div className=\"flex items-center gap-4 text-sm\">\n              {Object.entries(transportStyles).map(([mode, style]) => (\n                <div key={mode} className=\"flex items-center gap-1\">\n                  <div \n                    className=\"w-4 h-1\" \n                    style={{ \n                      backgroundColor: style.color,\n                      borderStyle: style.dashArray ? 'dashed' : 'solid',\n                      borderWidth: '1px'\n                    }}\n                  ></div>\n                  <span className=\"capitalize\">{mode}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Map */}\n        <div style={{ height, width: '100%' }}>\n          <MapContainer\n            center={mapCenter}\n            zoom={mapZoom}\n            style={{ height: '100%', width: '100%' }}\n            scrollWheelZoom={true}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <TileLayer\n              attribution='&copy; <a href=\"https://www.openseamap.org\">OpenSeaMap</a> contributors'\n              url=\"https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png\"\n              opacity={0.7}\n            />\n\n            <LayersControl position=\"topright\">\n              {/* Route Layers */}\n              {routeData.map((route) => (\n                <LayersControl.Overlay \n                  key={route.id} \n                  name={route.name}\n                  checked={showAllRoutes || route.selected}\n                >\n                  <FeatureGroup>\n                    {/* Route line */}\n                    {route.routePath.length >= 2 && route.transportModes.map((mode, modeIndex) => {\n                      const style = transportStyles[mode] || transportStyles.truck;\n                      \n                      return (\n                        <Polyline\n                          key={`${route.id}-${mode}-${modeIndex}`}\n                          positions={route.routePath}\n                          pathOptions={{\n                            color: style.color,\n                            weight: style.weight,\n                            opacity: route.selected ? 1.0 : style.opacity,\n                            dashArray: style.dashArray\n                          }}\n                          eventHandlers={{\n                            click: () => {\n                              if (onRouteSelect) {\n                                onRouteSelect(route);\n                              }\n                            }\n                          }}\n                        >\n                          <Popup>\n                            <div className=\"min-w-64\">\n                              <h4 className=\"font-semibold text-blue-600 mb-2\">{route.name}</h4>\n                              <div className=\"space-y-1 text-sm\">\n                                <div><strong>Distance:</strong> {route.distance} miles</div>\n                                <div><strong>Time:</strong> {route.estimatedTime}</div>\n                                <div><strong>Cost:</strong> {formatCurrency(route.estimatedCost)}</div>\n                                {route.routingMethod && (\n                                  <div><strong>Method:</strong> {route.routingMethod.replace(/_/g, ' ')}</div>\n                                )}\n                                {route.fallback && (\n                                  <div className=\"text-yellow-600\"><strong>⚠️ Estimated route</strong></div>\n                                )}\n                              </div>\n                            </div>\n                          </Popup>\n                        </Polyline>\n                      );\n                    })}\n\n                    {/* Route waypoint markers */}\n                    {route.routePath.map((coords, index) => {\n                      const isOrigin = index === 0;\n                      const isDestination = index === route.routePath.length - 1;\n                      const isWaypoint = !isOrigin && !isDestination;\n\n                      let markerColor = '#6b7280'; // Default gray\n                      let markerSymbol = '📍';\n                      let markerSize = 30;\n\n                      if (isOrigin) {\n                        markerColor = '#10b981'; // Green\n                        markerSymbol = '📍';\n                      } else if (isDestination) {\n                        markerColor = '#ef4444'; // Red\n                        markerSymbol = '📍';\n                      } else if (isWaypoint) {\n                        markerColor = '#f59e0b'; // Yellow\n                        markerSymbol = '🟡';\n                        markerSize = 15;\n                      }\n\n                      return (\n                        <Marker\n                          key={`${route.id}-marker-${index}`}\n                          position={coords}\n                          icon={createCustomIcon(markerColor, markerSymbol, markerSize)}\n                        >\n                          <Popup>\n                            <div className=\"text-sm\">\n                              <div className=\"font-semibold\">\n                                {isOrigin ? 'Origin' : isDestination ? 'Destination' : 'Waypoint'}\n                              </div>\n                              <div>Coordinates: {coords[0].toFixed(4)}, {coords[1].toFixed(4)}</div>\n                            </div>\n                          </Popup>\n                        </Marker>\n                      );\n                    })}\n                  </FeatureGroup>\n                </LayersControl.Overlay>\n              ))}\n\n              {/* All Locations Layer */}\n              <LayersControl.Overlay name=\"All Ports & Hubs\" checked={false}>\n                <FeatureGroup>\n                  {Object.entries(locations).map(([name, coords]) => (\n                    <Marker\n                      key={name}\n                      position={coords}\n                      icon={createCustomIcon('#6366f1', '🏭')}\n                    >\n                      <Popup>\n                        <div className=\"text-sm\">\n                          <div className=\"font-semibold\">{name}</div>\n                          <div>Coordinates: {coords[0].toFixed(4)}, {coords[1].toFixed(4)}</div>\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            Available for truck and rail transport\n                          </div>\n                        </div>\n                      </Popup>\n                    </Marker>\n                  ))}\n                </FeatureGroup>\n              </LayersControl.Overlay>\n            </LayersControl>\n          </MapContainer>\n        </div>\n\n        {/* Route Summary */}\n        {routeData.length > 0 && (\n          <div className=\"bg-gray-50 px-4 py-3 border-t\">\n            <div className=\"text-sm text-gray-600\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <strong>Route Summary:</strong> {origin} → {destination}\n                </div>\n                <div className=\"flex items-center gap-4\">\n                  {selectedRoute ? (\n                    <div className=\"text-blue-600\">\n                      <strong>Selected:</strong> {selectedRoute.name}\n                    </div>\n                  ) : (\n                    <div className=\"text-gray-500\">\n                      Click on a route to select it\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default RouteMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}